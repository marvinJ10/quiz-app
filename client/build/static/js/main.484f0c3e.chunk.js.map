{"version":3,"sources":["state/action-types/index.ts","state/action-creators/index.ts","services/questions-api.ts","state/reducers/gameoverReducer.ts","state/reducers/loadingReducer.ts","state/reducers/numberReducer.ts","state/reducers/questionsReducer.ts","state/reducers/userAnswersReducer.ts","state/reducers/scoreReducer.ts","state/reducers/userClickedReducer.ts","state/reducers/settingsReducer.ts","state/reducers/userScoresReducer.ts","state/reducers/index.ts","state/store.ts","utils/utils.ts","components/QuestionCard/QuestionCard.css.js","components/QuestionCard/QuestionCard.tsx","components/QuizSettings/QuizSettings.css.js","components/QuizSettings/QuizSettings.tsx","services/userscore-api.ts","components/UserInput/UserInput.css.js","components/UserInput/UserInput.tsx","components/UserScoreList/UserScoresList.css.js","components/UserScoreList/UserScoreList.tsx","App.css.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionType","Difficulty","setUserScores","userscores","dispatch","type","GETUSERSCORES","setSettings","amount","difficulty","console","log","SETTINGS","settings","setUserClicked","clicked","USERCLICKED","setLoading","loading","LOADING","setQuestions","questions","QUESTIONS","setNumber","number","NUMBER","setUserAnswers","useranswers","USERANSWERS","setScore","score","SCORE","setGameover","gameover","GAMEOVER","reducer","state","action","initialState","reducers","combineReducers","gameoverReducer","loadingReducer","numberReducer","questionsReducer","userAnswers","userAnswersReducer","scoreReducer","userClicked","userClickedReducer","settingsReducer","userScoresReducer","store","createStore","applyMiddleware","thunk","format","string","replaceAll","QuestionCardStyle","styled","div","Div","Question","QuestionText","Answer","button","QuestionCard","useDispatch","bindActionCreators","actionCreators","scoreState","useSelector","gameoverState","questionsState","numberState","userAnswersState","userClickedState","TOTAL_QUESTIONS","currentQuestion","checkAnswer","e","answer","currentTarget","value","correct","correct_answer","answerObject","question","correctAnswer","className","answers","map","idx","disabled","onClick","length","fetchQuizQuestions","a","endpoint","axios","get","payload","data","results","array","incorrect_answers","sort","Math","random","Error","Settings","Label","label","Input","input","Select","select","QuizSettings","useState","setDiffuclty","setAmount","id","name","onChange","handleAmount","parseInt","target","handleDifficulty","EASY","MEDIUM","HARD","baseUrl","saveRequest","username","post","savePayload","getUserScores","InputDiv","H","Button","UserInput","setUsername","scoreset","setScoreSet","userScores","placeholder","api","UserScores","Head","span","Td","td","Hr","hr","Thead","thead","UserScoreList","useEffect","userscore_api","then","userscore","NextQuestion","H1","h1","Score","Background","H2","StartButton","Center","App","loadingState","seeUserScores","setSeeUserScores","startQuiz","recievedData","nextQuestion","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.484f0c3e.chunk.js","sourcesContent":["export enum ActionType {\r\n  LOADING = 'loading',\r\n  QUESTIONS = 'questions',\r\n  NUMBER = 'number',\r\n  USERANSWERS = 'useranswers',\r\n  SCORE = 'score',\r\n  GAMEOVER = 'gameover',\r\n  USERCLICKED = 'userclicked',\r\n  SETTINGS = 'SETTINGS',\r\n  GETUSERSCORES = 'getuserscores'\r\n}","import { ActionType } from \"../action-types\"\r\nimport { Dispatch } from \"redux\"    // use Dispatch type from redux to please typescript\r\nimport { Action } from '../actions/index'\r\n\r\nexport const setUserScores = (userscores: {username: string, score: number, difficulty: string}[]) => {\r\n  return (dispatch: Dispatch<Action>) => {\r\n    dispatch({\r\n      type: ActionType.GETUSERSCORES,\r\n      userscores\r\n    })\r\n  }\r\n}\r\n\r\nexport const setSettings = (amount: number, difficulty: string) => {\r\n  return (dispatch: Dispatch<Action>) => {\r\n    console.log('clicked action hit: ', amount, difficulty)\r\n    dispatch({\r\n      type: ActionType.SETTINGS,\r\n      settings: {\r\n        amount,\r\n        difficulty\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const setUserClicked = (clicked: boolean) => {\r\n  console.log('clicked action hit: ', clicked)\r\n  return (dispatch: Dispatch<Action>) => {\r\n    console.log('clicked action hit: ', clicked)\r\n    dispatch({\r\n      type: ActionType.USERCLICKED,\r\n      clicked\r\n    })\r\n  }\r\n}\r\n\r\nexport const setLoading = (loading: boolean) => {\r\n  console.log('loading action hit: ', loading)\r\n  return (dispatch: Dispatch<Action>) => {\r\n    console.log('loading action hit: ', loading)\r\n    dispatch({\r\n      type: ActionType.LOADING,\r\n      loading\r\n    })\r\n  }\r\n}\r\n\r\nexport const setQuestions = (questions: Question[]) => {\r\n  return (dispatch: Dispatch<Action>) => {\r\n    dispatch({\r\n      type: ActionType.QUESTIONS,\r\n      questions\r\n    })\r\n  }\r\n}\r\n\r\nexport const setNumber = (number: number) => {\r\n  return (dispatch: Dispatch<Action>) => {\r\n    dispatch({\r\n      type: ActionType.NUMBER,\r\n      number\r\n    })\r\n  }\r\n}\r\n\r\nexport const setUserAnswers = (useranswers: AnswerObject[]) => {\r\n  return (dispatch: Dispatch<Action>) => {\r\n    dispatch({\r\n      type: ActionType.USERANSWERS,\r\n      useranswers\r\n    })\r\n  }\r\n}\r\n\r\nexport const setScore = (score: number) => {\r\n  return (dispatch: Dispatch<Action>) => {\r\n    dispatch({\r\n      type: ActionType.SCORE,\r\n      score\r\n    })\r\n  }\r\n}\r\n\r\nexport const setGameover = (gameover: boolean) => {\r\n  return (dispatch: Dispatch<Action>) => {\r\n    dispatch({\r\n      type: ActionType.GAMEOVER,\r\n      gameover\r\n    })\r\n  }\r\n}","import axios, { AxiosResponse } from 'axios'\r\nimport { shuffleArray } from '../utils/utils'\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = 'medium',\r\n  HARD = 'hard'\r\n}\r\n\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`\r\n  try {\r\n\r\n    const payload: AxiosResponse = await axios.get(endpoint)\r\n\r\n    return payload.data.results.map((question: Question) => (\r\n      {\r\n        ...question,\r\n        answers: shuffleArray([\r\n          ...question.incorrect_answers, \r\n          question.correct_answer\r\n        ])\r\n      }\r\n    ))\r\n\r\n  } catch (error){\r\n\r\n    throw new Error(error)\r\n\r\n  }\r\n}","import { ActionType } from '../action-types/index'\r\nimport { Action } from '../actions/index'\r\n\r\nconst initialState = true\r\n\r\nconst reducer = (state: boolean = initialState, action: Action) => {\r\n  switch (action.type){\r\n    case ActionType.GAMEOVER:\r\n      return action.gameover\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer","import { ActionType } from '../action-types/index'\r\nimport { Action } from '../actions/index'\r\n\r\nconst initialState = false\r\n\r\nconst reducer = (state: boolean = initialState, action: Action) => {\r\n  console.log('loading reducer hit!!!')\r\n  switch (action.type){\r\n    case ActionType.LOADING:\r\n      console.log('loading reducer hit, set to state: ', action.loading)\r\n      return action.loading\r\n    default:\r\n      console.log('return loading state reducer')\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer","import { ActionType } from '../action-types/index'\r\nimport { Action } from '../actions/index'\r\n\r\nconst initialState = 0\r\n\r\nconst reducer = (state: number = initialState, action: Action) => {\r\n  switch (action.type){\r\n    case ActionType.NUMBER:\r\n      return action.number\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer","import { ActionType } from '../action-types/index'\r\nimport { Action } from '../actions/index'\r\n\r\nconst initialState: Question[] = []\r\n\r\nconst reducer = (state: Question[] = initialState, action: Action) => {\r\n  switch (action.type){\r\n    case ActionType.QUESTIONS:\r\n      return action.questions\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer","import { ActionType } from '../action-types/index'\r\nimport { Action } from '../actions/index'\r\n\r\nconst initialState: AnswerObject[] = []\r\n\r\nconst reducer = (state: AnswerObject[] = initialState, action: Action) => {\r\n  switch (action.type){\r\n    case ActionType.USERANSWERS:\r\n      return action.useranswers\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer","import { ActionType } from '../action-types/index'\r\nimport { Action } from '../actions/index'\r\n\r\nconst initialState = 0\r\n\r\nconst reducer = (state: number = initialState, action: Action) => {\r\n  switch (action.type){\r\n    case ActionType.SCORE:\r\n      return action.score\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer","import { ActionType } from '../action-types/index'\r\nimport { Action } from '../actions/index'\r\n\r\nconst initialState = false\r\n\r\nconst reducer = (state: boolean = initialState, action: Action) => {\r\n  console.log('userClicked reducer hit!!!')\r\n  switch (action.type){\r\n    case ActionType.USERCLICKED:\r\n      return action.clicked\r\n    default:\r\n      console.log('return loading state reducer')\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer","// amount: number, difficulty: string\r\nimport { ActionType } from '../action-types/index'\r\nimport { Action } from '../actions/index'\r\n\r\nconst initialState = {amount: 10, difficulty: 'easy'}\r\n\r\nconst reducer = (state: {amount: number, difficulty: string} = initialState, action: Action) => {\r\n  switch (action.type){\r\n    case ActionType.SETTINGS:\r\n      return action.settings\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer","import { ActionType } from '../action-types/index'\r\nimport { Action } from '../actions/index'\r\n\r\nconst initialState: UserScore[] = []\r\n\r\nconst reducer = (state: UserScore[] = initialState, action: Action) => {\r\n  switch (action.type){\r\n    case ActionType.GETUSERSCORES:\r\n      return action.userscores\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer","import { combineReducers } from 'redux'\r\nimport gameoverReducer from './gameoverReducer'\r\nimport loadingReducer from './loadingReducer'\r\nimport numberReducer from './numberReducer'\r\nimport questionsReducer from './questionsReducer'\r\nimport userAnswersReducer from './userAnswersReducer'\r\nimport scoreReducer from './scoreReducer'\r\nimport userClickedReducer from './userClickedReducer'\r\nimport settingsReducer from './settingsReducer'\r\nimport userScoresReducer from './userScoresReducer'\r\n\r\nconst reducers = combineReducers({\r\n  gameover: gameoverReducer,\r\n  loading: loadingReducer,\r\n  number: numberReducer,\r\n  questions: questionsReducer,\r\n  userAnswers: userAnswersReducer,\r\n  score: scoreReducer,\r\n  userClicked: userClickedReducer,\r\n  settings: settingsReducer,\r\n  userscores: userScoresReducer\r\n})\r\n\r\nexport default reducers\r\n// define State Type, this exactly interprets what we want\r\n// interpret whatever type we pass in traingle brackets\r\nexport type State = ReturnType<typeof reducers>","import { createStore, applyMiddleware } from 'redux'\r\nimport reducers from './reducers/index'\r\nimport thunk from 'redux-thunk'\r\n\r\nexport const store = createStore(\r\n  reducers,\r\n  {},\r\n  applyMiddleware(thunk)\r\n)","// shuffle the answers array..\r\nexport const shuffleArray = (array: any[]) =>\r\n[...array].sort(() => Math.random() - 0.5)\r\n\r\n// replace &quot; and &amp; with respective characters\r\nexport const format = (string: string) => {\r\n  const formatted = string.replaceAll(\"&quot;\", '\"').replaceAll(\"&#039;\", \"\")\r\n  return formatted\r\n}\r\n","import styled from '@emotion/styled'\r\n\r\nexport const QuestionCardStyle = styled.div`\r\n  text-align: left;\r\n  width: 100%;\r\n  margin-left: 3em;\r\n`\r\nexport const Div = styled.div`\r\n  height: 62px;\r\n`\r\n\r\nexport const Question = styled.div`\r\n  font-size: 1.7em;\r\n  font-weight: 500;\r\n  width: 100%;\r\n`\r\n\r\nexport const QuestionText = styled.div`\r\n  font-size: 1.3em;\r\n  margin: 1em 0;\r\n`\r\n\r\nexport const Answer = styled.button`\r\n  margin: 10px 0;\r\n  color: black;\r\n  font-size: 1.2em;\r\n  padding: 8px 10px;\r\n  background: rgb(210,245,244);\r\n  background: linear-gradient(97deg, rgba(210,245,244,1) 0%, rgba(0,255,2,0.43187066974595845) 100%);\r\n  &:hover{\r\n    background: rgb(16,122,118);\r\n    background: linear-gradient(97deg, rgba(16,122,118,1) 0%, rgba(28,108,1,1) 100%);\r\n    color: white;\r\n    cursor: pointer;\r\n  }\r\n  &:active{\r\n    color: white;\r\n    background-color: #138080\r\n  }\r\n  &:disabled{\r\n    cursor: not-allowed;\r\n    background: rgb(10,14,10);\r\n    background: linear-gradient(97deg, rgba(10,14,10,0.43187066974595845) 0%, rgba(239,241,241,1) 100%);\r\n  }\r\n\r\n`","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\nimport { actionCreators } from '../../state';\r\nimport { format } from '../../utils/utils'\r\nimport { QuestionCardStyle, Question, QuestionText, Div, Answer } from './QuestionCard.css.js'\r\n\r\n// display a question based on question number\r\nconst QuestionCard: React.FC = () => {\r\n  // set up action creators to manipulate state\r\n  const dispatch = useDispatch()\r\n  const { setScore, setUserAnswers, setUserClicked } = bindActionCreators(actionCreators, dispatch)\r\n\r\n  // set up so you can also see state\r\n  const scoreState = useSelector((state: any) => state.score)\r\n  \r\n  const gameoverState = useSelector((state: any) => state.gameover)\r\n  const questionsState = useSelector((state: any) => state.questions)\r\n  const numberState = useSelector((state: any) => state.number)\r\n  const userAnswersState = useSelector((state: any) => state.userAnswers)\r\n  const userClickedState = useSelector((state: any) => state.userClicked)\r\n  const settings = useSelector((state: any) => state.settings)\r\n  const TOTAL_QUESTIONS = settings.amount\r\n  \r\n  const currentQuestion = questionsState[numberState]\r\n  // check the answer on question click\r\n\r\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    if(!gameoverState){\r\n      const answer = e.currentTarget.value\r\n      // check the answer against the correct answer\r\n      const correct = currentQuestion.correct_answer === answer\r\n      // Add score if answer is correct\r\n      if (correct) setScore(scoreState + 1)\r\n      // Save answer in the array for user answers\r\n      const answerObject = {\r\n        question: currentQuestion.question,\r\n        answer,\r\n        correct,\r\n        correctAnswer: currentQuestion.correct_answer\r\n      }\r\n      setUserAnswers([...userAnswersState, answerObject])\r\n      setUserClicked(true)\r\n      \r\n    }\r\n  }\r\n\r\n  return (\r\n      <QuestionCardStyle>\r\n        <Question className=\"question-number\"> Question {numberState + 1} / {TOTAL_QUESTIONS}</Question>\r\n        <QuestionText className=\"question\"> {format(currentQuestion.question)} </QuestionText>\r\n        {currentQuestion.answers.map((answer: string, idx: string) => (\r\n          <div key={idx}>\r\n            <Answer disabled={userClickedState} value={answer} onClick={checkAnswer}>\r\n              {format(answer)}\r\n            </Answer>\r\n          </div>\r\n        ))}\r\n        {((!userClickedState && !gameoverState) && (questionsState.length !== userAnswersState.length)) && \r\n          <Div></Div>\r\n        }\r\n      </QuestionCardStyle>\r\n  )\r\n}\r\n\r\nexport default QuestionCard","import styled from '@emotion/styled'\r\n\r\nexport const Settings = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  font-size: 1.5em;\r\n`\r\n\r\nexport const Label = styled.label`\r\n  margin: 10px;\r\n  text-align: center;\r\n`\r\n\r\nexport const Input = styled.input`\r\n  font-size: 1em;\r\n  text-align: center;\r\n  width: 50%;\r\n`\r\n\r\nexport const Select = styled.select`\r\n  font-size: 1em;\r\n  text-align: center;\r\n  margin-bottom: 1.3em;\r\n  width: 50%;\r\n`","import { useState } from 'react'\r\nimport { Difficulty } from '../../services/questions-api'\r\nimport { useDispatch } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\nimport { actionCreators } from '../../state';\r\nimport { Settings, Label, Input, Select } from './QuizSettings.css.js'\r\n\r\nconst QuizSettings = () => {\r\n    // here are the settings in state\r\n    \r\n    const dispatch = useDispatch()\r\n    const { setSettings } = bindActionCreators(actionCreators, dispatch) \r\n\r\n\r\n    // temporary storage for settings state\r\n    const [difficulty, setDiffuclty] = useState(\"easy\")\r\n    const [amount, setAmount] = useState(10)\r\n\r\n    // use two calls on onChange to change local and global state\r\n    const handleAmount = (amount:number) => {\r\n      setAmount(amount)\r\n      setSettings(amount, difficulty)\r\n    }\r\n\r\n    const handleDifficulty = (difficulty:string) => {\r\n      setDiffuclty(difficulty)\r\n      setSettings(amount, difficulty)\r\n    }\r\n\r\n    // onChange, trigger state storage\r\n    return (\r\n      <div className=\"quiz-settings\">\r\n        <Settings>\r\n          <Label>Choose # of Questions: </Label>\r\n          <Input \r\n            type=\"number\" \r\n            id=\"quiznum\" \r\n            name=\"question-num\" \r\n            value={amount} \r\n            onChange={e => \r\n            handleAmount(parseInt(e.target.value))}\r\n            />\r\n\r\n          <Label>Choose difficulty: </Label>\r\n          <Select name=\"difficulty-setting\" id=\"difficulty-setting\" onChange={e => handleDifficulty(e.target.value)}>\r\n              <option value={Difficulty.EASY}>Easy</option>\r\n              <option value={Difficulty.MEDIUM}>Medium</option>\r\n              <option value={Difficulty.HARD}>Hard</option>\r\n          </Select>\r\n        </Settings>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default QuizSettings","import axios, { AxiosResponse } from 'axios'\r\n\r\nconst baseUrl: string = 'https://localhost:1337/api'\r\n\r\nexport const saveRequest = async (username: string, score: number,  difficulty: string) => {\r\n  try {\r\n    const payload = {username, score, difficulty}\r\n    const savePayload: AxiosResponse = await axios.post(\r\n      baseUrl,\r\n      payload\r\n      )\r\n    console.log('recieved payload from backend: ', savePayload)\r\n    return savePayload\r\n  } catch (error) {\r\n    throw new Error(error)\r\n  }\r\n}\r\n\r\nexport const getUserScores = async () => {\r\n  try {\r\n    const payload: AxiosResponse = await axios.get(baseUrl)\r\n\r\n    console.log('recieved payload in services api: ', payload.data)\r\n    return await payload.data\r\n\r\n  } catch (error) {\r\n    throw new Error(error)\r\n  }\r\n}","import styled from '@emotion/styled'\r\n\r\nexport const InputDiv = styled.div`\r\n  padding-bottom: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nexport const H = styled.div`\r\n  font-size: 2em;\r\n  margin-bottom: 20px;\r\n`\r\nexport const Input = styled.input`\r\n  font-size: 1.5em;\r\n  margin-bottom: 15px;\r\n`\r\nexport const Button = styled.button`\r\n  width: 70%;\r\n  font-size: 1.5em;\r\n  margin: 10px;\r\n  text-align: center;\r\n  justify-self: center;\r\n  background: rgb(255,175,189);\r\n  background: radial-gradient(circle, rgba(255,175,189,1) 15%, rgba(255,195,160,1) 76%, rgba(255,231,0,1) 97%);\r\n  &:hover{\r\n    color: white;\r\n    border-color: white;\r\n    background: rgb(253,187,45);\r\n    background: radial-gradient(circle, rgba(253,187,45,1) 6%, rgba(240,214,214,1) 93%);\r\n    cursor: pointer;\r\n  }\r\n`","import { useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport { actionCreators } from '../../state/'\r\nimport * as api from '../../services/userscore-api'\r\nimport { InputDiv, Input, H, Button } from './UserInput.css.js'\r\n\r\nconst UserInput = () => {\r\n    // temporary state holders for this single component\r\n    const [username, setUsername] = useState(\"\")\r\n    const [scoreset, setScoreSet] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n    const { setUserScores } = bindActionCreators(actionCreators, dispatch)\r\n    const userScores = useSelector((state: any) => state.userscores)\r\n    const difficulty = useSelector((state: any) => state.difficulty)\r\n    // global state we will also pass to the backend\r\n    const scoreState = useSelector((state: any) => state.score)\r\n    const settings = useSelector((state: any) => state.settings)\r\n\r\n    const handleClick = () => {\r\n      if(username){\r\n        setScoreSet(true)\r\n        setUserScores([...userScores, {username, score: scoreState, difficulty: settings.difficulty}])\r\n        api.saveRequest(username, scoreState, settings.difficulty)\r\n      }\r\n    }\r\n\r\n    return (\r\n      <InputDiv>\r\n        {!scoreset ? (\r\n          <>\r\n            <H>Save your score?</H>\r\n            <Input placeholder=\"Your name...\" type=\"text\" name='username' onChange={(e) => setUsername(e.target.value)}/>\r\n            <Button onClick={handleClick}>Save</Button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <H>Score Saved!</H>\r\n          </>\r\n        )}\r\n      </InputDiv>\r\n    );\r\n}\r\n\r\nexport default UserInput","import styled from '@emotion/styled'\r\n\r\nexport const UserScores = styled.div`\r\n  padding: 10px;\r\n  margin-bottom: 20px;\r\n  border-radius: 20px;\r\n  border: 3px solid black;\r\n  -moz-box-shadow: 3px 3px 3px black;\r\n  -webkit-box-shadow: 3px 3px 3px black;\r\n  box-shadow: 7px 7px 7px black;\r\n  display: flex;\r\n  text-align: center;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n`\r\n\r\nexport const Head = styled.span`\r\n  font-size: 2.5em;\r\n  font-weight: 900;\r\n  margin: 10px 0 15px 0;\r\n`\r\n\r\nexport const Td = styled.td`\r\n  margin: 20em;\r\n  font-size: 1.3em;\r\n  padding: 0.3em 1em;\r\n`\r\nexport const Hr = styled.hr`\r\n  width: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n`\r\n\r\nexport const Thead = styled.thead`\r\n  font-size: 1.3em;\r\n  font-weight: 800;\r\n  letter-spacing: 0.1em;\r\n`","import { useEffect } from 'react'\r\nimport * as userscore_api from '../../services/userscore-api'\r\nimport { bindActionCreators } from 'redux';\r\nimport { actionCreators } from '../../state/';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { UserScores, Head, Hr, Thead, Td } from './UserScoresList.css.js'\r\n\r\nconst UserScoreList = () => {\r\n    const dispatch = useDispatch()\r\n    const { setUserScores } = bindActionCreators(actionCreators, dispatch)\r\n    const userScores = useSelector((state: any) => state.userscores)\r\n\r\n    // set userscores in state onmount only if state is currently empty\r\n    useEffect(() => {\r\n      if(userScores.length === 0){\r\n        userscore_api.getUserScores()\r\n        .then(data => {\r\n          setUserScores(data)\r\n        })\r\n      }\r\n\r\n    }, []);\r\n\r\n    return (\r\n      <div className=\"userscores-list\">\r\n        <UserScores>\r\n        <Head>User Scores</Head>\r\n        <Hr></Hr>\r\n        <table>\r\n          <Thead>\r\n            <tr>\r\n              <Td>Username</Td>\r\n              <Td>Score</Td>\r\n              <Td>Difficulty</Td>\r\n            </tr>\r\n          </Thead>\r\n          <tbody>\r\n            {userScores.length === 0 && <p>Loading...</p>}\r\n            {userScores.map((userscore: any, idx: string) => (\r\n              <tr key={idx}>\r\n                <Td>{userscore.username}</Td>\r\n                <Td>{userscore.score}</Td>\r\n                <Td>{userscore.difficulty}</Td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        </UserScores>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default UserScoreList","import styled from '@emotion/styled'\r\n\r\nexport const NextQuestion = styled.button`\r\n  margin: 10px 0;\r\n  color: black;\r\n  font-size: 1.2em;\r\n  padding: 8px 10px;\r\n  background: rgb(246,255,35);\r\n  background: linear-gradient(97deg, rgba(246,255,35,0.8314087759815243) 0%, rgba(245,183,0,1) 100%);\r\n  &:hover{\r\n    color: white;\r\n    background-color: #E6F7F7;\r\n    cursor: pointer;\r\n    background: rgb(193,144,1);\r\n    background: linear-gradient(97deg, rgba(193,144,1,1) 1%, rgba(118,122,16,0.8314087759815243) 100%);\r\n  }\r\n  &:active{\r\n    color: white;\r\n    background: rgb(193,144,1);\r\n    background: linear-gradient(97deg, rgba(193,144,1,1) 1%, rgba(118,122,16,0.8314087759815243) 100%);\r\n  }\r\n  &:disabled{\r\n    cursor: not-allowed;\r\n    background-color: #D5E6E6;\r\n  }\r\n`\r\nexport const H1 = styled.h1`\r\n  font-size: 3em;\r\n  letter-spacing: 0.1em;\r\n  margin: 20px 0;\r\n`\r\n\r\nexport const Score = styled.span`\r\n  font-size: 2.4em;\r\n  font-weight: 600;\r\n`\r\n\r\nexport const Background = styled.div`\r\n  background-color: white;\r\n  border: 3px solid black;\r\n  -moz-box-shadow: 3px 3px 3px black;\r\n  -webkit-box-shadow: 3px 3px 3px black;\r\n  box-shadow: 7px 7px 7px black;\r\n  margin-top: 3em;\r\n  border-radius: 20px;\r\n  width: 90%;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`\r\nexport const Button = styled.button`\r\n  font-size: 1.4em;\r\n  padding: 0.3em 0.8em;\r\n  width: 230px;\r\n  color: black;\r\n  background: rgb(255,175,189);\r\n  background: radial-gradient(circle, rgba(255,175,189,1) 15%, rgba(255,195,160,1) 76%, rgba(255,231,0,1) 97%);\r\n  margin-bottom: 1.5em;\r\n  &:hover{\r\n    color: white;\r\n    border-color: white;\r\n    background: rgb(253,187,45);\r\n    background: radial-gradient(circle, rgba(253,187,45,1) 6%, rgba(240,214,214,1) 93%);\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nexport const H2 = styled.div`\r\n  font-size: 3em;\r\n  margin-bottom: 20px;\r\n  letter-spacing: 0.1em;\r\n`\r\n\r\nexport const StartButton = styled.button`\r\n  font-size: 1.4em;\r\n  padding: 0.3em 0.8em;\r\n  width: 230px;\r\n  margin-bottom: 1em;\r\n  background: rgb(255,175,189);\r\n  background: radial-gradient(circle, rgba(255,175,189,1) 15%, rgba(255,195,160,1) 76%, rgba(255,231,0,1) 97%);\r\n  &:hover{\r\n    color: white;\r\n    border-color: white;\r\n    background: rgb(253,187,45);\r\n    background: radial-gradient(circle, rgba(253,187,45,1) 6%, rgba(240,214,214,1) 93%);\r\n    cursor: pointer;\r\n  }\r\n`\r\nexport const Center = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`","import React, { useState } from 'react';\r\n// Components\r\nimport QuestionCard from './components/QuestionCard/QuestionCard'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { fetchQuizQuestions } from './services/questions-api'\r\n// action creators for redux store state management\r\nimport { bindActionCreators } from 'redux';\r\nimport { actionCreators } from './state/';\r\nimport QuizSettings from './components/QuizSettings/QuizSettings';\r\nimport UserInput from './components/UserInput/UserInput';\r\nimport UserScoreList from './components/UserScoreList/UserScoreList';\r\nimport { Center, Background, H1, H2, StartButton, Button, Score, NextQuestion } from './App.css.js'\r\n\r\nfunction App() {\r\n  // set up action creators for state management\r\n  const dispatch = useDispatch()\r\n  const { setUserClicked, setGameover, setLoading, setQuestions, setScore, setNumber, setUserAnswers, setSettings } = bindActionCreators(actionCreators, dispatch)\r\n\r\n  // set up so you can also see state\r\n  const scoreState = useSelector((state: State) => state.score)\r\n  const loadingState = useSelector((state: State) => state.loading)\r\n  const gameoverState = useSelector((state: State) => state.gameover)\r\n  const questionsState = useSelector((state: State) => state.questions)\r\n  const numberState = useSelector((state: State) => state.number)\r\n  const userAnswersState = useSelector((state: State) => state.userAnswers)\r\n  const userClickedState = useSelector((state: State) => state.userClicked)\r\n  const settings = useSelector((state: any) => state.settings)\r\n\r\n  const TOTAL_QUESTIONS = settings.amount\r\n\r\n  const [seeUserScores, setSeeUserScores] = useState(false)\r\n\r\n  // make the API call when trivia game is started\r\n  const startQuiz = async () => {\r\n    // Reset everything in state so player can do the quiz again\r\n    setGameover(false)\r\n    setLoading(true)\r\n    setNumber(0)\r\n    setUserAnswers([])\r\n    setScore(0)\r\n    setUserClicked(false)\r\n    setSeeUserScores(false)\r\n    \r\n    fetchQuizQuestions(settings.amount, settings.difficulty)\r\n    .then((recievedData) => {\r\n      if(recievedData){\r\n        setQuestions(recievedData)\r\n        setLoading(false)  // idea - add a CSS loader!\r\n      }\r\n    })\r\n  }\r\n\r\n  const resetQuiz = () => {\r\n    setGameover(true)\r\n    setSeeUserScores(false)\r\n    setNumber(0)\r\n    setScore(0)\r\n    setUserClicked(false)\r\n    setSettings(settings.amount, settings.difficulty)\r\n    setQuestions([])\r\n    setUserAnswers([])\r\n  }\r\n\r\n  // next question\r\n  const nextQuestion = () => {\r\n    // move onto the next question if not the last question\r\n    const nextQuestion = numberState + 1\r\n    console.log('nextQ: ', nextQuestion, 'totalQ: ', TOTAL_QUESTIONS)\r\n    // if next question is last question, set gameover\r\n    if (nextQuestion === TOTAL_QUESTIONS){\r\n      setGameover(true) \r\n    } else {\r\n      setNumber(nextQuestion)\r\n      setUserClicked(false)\r\n    }\r\n  }\r\n\r\n  // display start button only if gameover == true or user is at last question\r\n  // only show score if gameover is not true\r\n  return (\r\n    <Center>\r\n      <Background>\r\n          <H1>The Ultimate Quiz</H1>\r\n          {questionsState.length === 0 || userAnswersState.length === TOTAL_QUESTIONS ? (\r\n            <>\r\n            {userAnswersState.length === TOTAL_QUESTIONS && (<H2>Game Over</H2>)}\r\n            {!loadingState && (\r\n              <>\r\n                {gameoverState && <QuizSettings />}\r\n                <StartButton className=\"start\" onClick={gameoverState ? startQuiz : resetQuiz}>\r\n                  {gameoverState ? \"Start\" : \"Reset\"}\r\n                </StartButton>\r\n                <Button onClick={() => setSeeUserScores(!seeUserScores)}>\r\n                  {seeUserScores ? 'Close User Scores' : 'See User Scores'}\r\n                </Button>\r\n                \r\n                \r\n              </>\r\n            )}\r\n            </>\r\n          ): null}\r\n          \r\n          {(!gameoverState && !loadingState) && <p className=\"score\"><Score>Score: {scoreState}</Score></p>}\r\n          {(!gameoverState && !loadingState && (questionsState.length === userAnswersState.length)) && <UserInput/>}\r\n          {loadingState && <p>loading...</p> }\r\n          {(!loadingState && !gameoverState && !seeUserScores && (questionsState.length !== userAnswersState.length)) && (\r\n              <QuestionCard />\r\n          )}\r\n\r\n          {((userClickedState && !gameoverState) && (questionsState.length !== userAnswersState.length)) && \r\n            <NextQuestion className=\"next-btn\" onClick={nextQuestion}>\r\n              Next Question\r\n            </NextQuestion>\r\n          }\r\n          {seeUserScores && (\r\n            <UserScoreList/>\r\n          )}\r\n        </Background>\r\n      </Center>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n// For Redux..\r\nimport { Provider } from 'react-redux'\r\nimport { store } from './state/index'\r\nimport './index.css'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}